% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nanodrop_read.R
\name{read_nanodrop}
\alias{read_nanodrop}
\title{Read in a NanoDrop file}
\usage{
read_nanodrop(path, nucleotide = NULL, date = NULL, date_order = NULL)
}
\arguments{
\item{path}{path to a NanoDrop .csv}

\item{nucleotide}{An optional character vector describing the analyte
detected. If NULL (the default), it will automatically try to extract one
from the file path. Valid values include RNA, DNA, dsDNA, and dsRNA (or
NULL).}

\item{date}{An optional character vector coercible to a date object. If NULL
(the default), it will automatically try to extract one from the file path.
See details for detection methods.}

\item{date_order}{An optional character vector to enforce an order of date to
be read (if \code{date} is unspecified). Can be "ymd", "mdy", or "dmy"}
}
\value{
a \code{nanodrop} object
}
\description{
Read in a NanoDrop file
}
\details{
This function expects a file that has not been tampered with from
the nanodrop machine itself, aside for the name.

This function calls \code{read.delim} and guesses its encoding (usually
\verb{UTF-16LE}, unless it's been re-exported). It's less mysterious than reading
in an apparent \code{.csv} with \code{read.delim}, and it keeps you from having to
remember the encoding (which R often fails to auto-detect). When possible,
it attempts to extract the nucleotide type from the path provided.

if \code{date} is \code{NULL}, the function will attempt to extract a date from the
file name (not the whole file path). It will look for ymd, mdy, and dmy (in
order). If it detects the first format, it will not look for the second,
etc. Note how a reading taken from April 4th but written as 4_3_2021 will
be misinterpreted. This error can be remedied by specifying the argument
\code{date_order}
}
\examples{
system.file("extdata", "nanodrop.csv", package = "mop") |>
  read_nanodrop()
}
